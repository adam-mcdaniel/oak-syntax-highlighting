{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Oak",
    "scopeName": "source.oak",
    "patterns": [
		{
			"include": "#line_comment"
		},
		{
			"include": "#string_literal"
        },
        {
            "include": "#character_literal"
        },
        {
            "include": "#self"
        },
        {
            "include": "core_types"
        },
        {
            "comment": "Attribute",
			"name": "meta.attribute.oak",
			"begin": "#\\!?\\[(\\w*)",
			"end": "\\]",
			"captures": {
				"1": {
					"name": "entity.name.function.attribute.rust"
				}
			}
        },
		{
			"comment": "Type declaration",
			"begin": "\\b(struct)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"end": "[\\{\\(;]",
			"beginCaptures": {
				"1": {
					"name": "storage.type.oak"
				},
				"2": {
					"name": "entity.name.type.oak"
				}
			}
		},
        {
			"comment": "Floating point literal (fraction)",
			"name": "constant.numeric.float.oak",
			"match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b"
		},
		{
			"comment": "Integer literal (decimal)",
			"name": "constant.numeric.integer.decimal.oak",
			"match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Integer literal (hexadecimal)",
			"name": "constant.numeric.integer.hexadecimal.oak",
			"match": "\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Integer literal (octal)",
			"name": "constant.numeric.integer.octal.oak",
			"match": "\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Integer literal (binary)",
			"name": "constant.numeric.integer.binary.oak",
			"match": "\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\b"
		},
        {
            "comment": "Boolean constant",
            "name": "constant.language.boolean.oak",
            "match": "\\b(true|false)\\b"
        },
        {
            "comment": "Control keyword",
            "name": "keyword.control.oak",
            "match": "\\b(break|continue|else|if|in|for|loop|return|while)\\b"
        },
        {
            "comment": "Keyword",
            "name": "keyword.other.oak",
            "match": "\\b(is_movable|sizeof|const|let|as)\\b"
        },
        {
            "comment": "Miscellaneous operator",
            "name": "keyword.operator.misc.oak",
            "match": "(=>|::|\\?)"
        },
        {
            "comment": "Comparison operator",
            "name": "keyword.operator.comparison.oak",
            "match": "(&&|\\|\\||==|!=)"
        },
        {
            "comment": "Assignment operator",
            "name": "keyword.operator.assignment.oak",
            "match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)"
        },
        {
            "comment": "Arithmetic operator",
            "name": "keyword.operator.arithmetic.oak",
            "match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>)"
        },
        {
            "comment": "Comparison operator (second group because of regex precedence)",
            "name": "keyword.operator.comparison.oak",
            "match": "(<=|>=|<|>)"
        },
        {
            "comment": "Function call",
            "match": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)!?\\s*\\(",
            "captures": {
                "1": {
                    "name": "entity.name.function.oak"
                }
            }
        },
        {
            "comment": "Function definition",
            "begin": "\\b(fn)\\s+([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)",
            "end": "[\\{;]",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.fn.oak"
                },
                "2": {
                    "name": "entity.name.function.oak"
                }
            },
            "patterns": [
                {
                    "include": "#self"
                },
                {
                    "comment": "Function arguments",
                    "match": "\bfn\b",
                    "name": "keyword.other.fn.oak"
                }
            ]
        }
    ],
    "repository": {
		"type": {
			"comment": "A type",
			"name": "entity.name.type.oak",
			"match": "\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\b"
		},
        "line_comment": {
            "comment": "Single-line comment",
            "name": "comment.line.double-slash.oak",
            "begin": "//",
            "end": "$"
        },
        "escaped_character": {
            "name": "constant.character.escape.oak",
            "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
        },
        "string_literal": {
            "comment": "Double-quote string literal",
            "name": "string.quoted.double.oak",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "include": "#escaped_character"
                }
            ]
        },
        "character_literal": {
            "comment": "Single-quote character literal",
            "name": "string.quoted.double.oak",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "include": "#escaped_character"
                }
            ]
        },
        "self": {
            "comment": "Self variable",
            "name": "variable.language.oak",
            "match": "\\bself\\b"
        },
        "core_types": {
            "comment": "Built-in/core type",
            "name": "meta.name.type.oak",
            "match": "\\b(bool|char|str|num)\\b"
        }
    }
}